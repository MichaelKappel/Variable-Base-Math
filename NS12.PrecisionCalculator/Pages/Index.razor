@page "/"
@using NS12.VariableBase.Mathematics.Common.Interfaces
@using NS12.VariableBase.Mathematics.Providers
@using NS12.VariableBase.Mathematics.Providers.MathEnvironments
@using VariableBase.Mathematics.Common.Models

<PageTitle>Calculator</PageTitle>

<h1>Full Precision Calculator</h1>
<div class="calculator">
    <div>Radix / Number System
        <select id="ddlRadix" @bind="@ddlRadix_value">
             <option value="2">Binary</option>
             <option value="3">Ternary</option>
             <option value="5">Quinary</option>
             <option value="6">Senary</option>
             <option value="8">Octal </option>
             <option value="10" selected="selected">Decimal</option>
             <option value="16">Hexadecimal</option>
             <option value="36">Hexatridecimal</option>
             <option value="63404">Radix 63404</option>
        </select>
    </div>
    <div class="calculator-input">
        <textarea id="txtCalculatorFirst" class="calculator" @bind="@calculatorFirstRaw" />
    </div>
    <div>Action
        <select id="ddlAction" @bind="@ddlAction_value">
             <option value="Add" selected="selected" >Add</option>
             <option value="Subtract">Subtract</option>
             <option value="Multiply">Multiply</option>
             <option value="Divide">Divide</option>
        </select>
    </div>
    <div class="calculator-input">
        <textarea id="txtCalculatorSecond" class="calculator" @bind="@calculatorSecondRaw" />
    </div>
    <button id="btnGoClicked"  @onclick="btnGoClicked" class="calculator calculator-symbol">Go</button>
    <div class="calculator-result">
        <textarea id="txtCalculatorOutputWhole" class="calculator-result-whole" @bind="@resultWholeRaw"  />
        <textarea id="txtCalculatorOutputNumerator" class="calculator-result-numerator" @bind="@resultNumeratorRaw" />
        <textarea id="txtCalculatorOutputDenominator" class="calculator-result-denominator"  @bind="@resultDenominatorRaw"/>
    </div>
</div>

<div>
    [
    <a href="https://github.com/MichaelKappel/Variable-Base-Math" 
            Title="Written Michael Joseph Kappel Available on GitHub">
                View Source Code on Github
     </a>
     ]
</div>

@code {

    String ddlAction_value = "Add";
    String ddlRadix_value = "10";

    String calculatorFirstRaw = "";
    String calculatorSecondRaw = "";

    String resultWholeRaw = "";
    String resultNumeratorRaw = "";
    String resultDenominatorRaw = "";

    public void btnGoClicked()
    {
        IMathEnvironment<Number> environment;

        if (ddlRadix_value == "2") {
            environment = new CharMathEnvironment("01");
        }else if (ddlRadix_value == "3") {
            environment = new CharMathEnvironment("012");
        }else if (ddlRadix_value == "5") {
            environment = new CharMathEnvironment("01234");
        }else if (ddlRadix_value == "5") {
            environment = new CharMathEnvironment("01234567");
        }else if (ddlRadix_value == "10") {
            environment = new CharMathEnvironment("0123456789");
        }else if (ddlRadix_value == "16") {
            environment = new CharMathEnvironment("0123456789abcdef");
        }else {
            environment = new CharMathEnvironment("0123456789abcdefghijklmnopqrstuvwxyz");
        }

        Number firstNumber = new Number(environment,new NumberSegments(calculatorFirstRaw.ToCharArray()), false);

        Number secondNumber = new Number(environment,new NumberSegments(calculatorSecondRaw.ToCharArray()),  false);

        Number result;

        if(ddlAction_value == "Add")
        {
            result = firstNumber + secondNumber;
        }
        else if(ddlAction_value == "Subtract")
        {
            result = firstNumber -= secondNumber;
        }
        else if(ddlAction_value == "Multiply")
        {
            result = firstNumber * secondNumber;
        }
        else
        {
            result = firstNumber / secondNumber;
        }

        resultWholeRaw = result.Segments[0].ToString();
        resultNumeratorRaw = result.Segments[1].ToString();
        resultDenominatorRaw = result.Segments[2].ToString();
    }
    
}